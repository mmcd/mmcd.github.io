<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title></title>
 <link href="http://www.wroth.com/atom.xml" rel="self"/>
 <link href="http://www.wroth.com"/>
 <updated>2024-05-15T16:20:32+00:00</updated>
 <author>
   <name>michael mcdermott</name>
   <email>mmcdermott2#student.gsu.edu</email>
 </author>

 
 <entry>
   <title>Getting Cassandra, Spark and Cuda to be interoperable</title>
   <link href="http://www.wroth.com/posts/spark-cassandra-gpu1.html"/>
   <updated>2017-05-23T00:54:22+00:00</updated>
   <id>/posts/spark-cassandra-gpu1</id>
   <content type="html">&lt;p&gt;This was fairly non-trivial to figure out, but in hindsight seems easy now. I need to write this up better, this is mostly just running notes for myself right now.&lt;/p&gt;

&lt;p&gt;The big things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I opted for Pyspark because python&lt;/li&gt;
  &lt;li&gt;I opted for Pycuda because pycuda&lt;/li&gt;
  &lt;li&gt;I opted for the cassandra driver in python because… see the pattern?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Leaning on python made everything a bit easier I think. I have gotten Hadoop and Cuda to talk to each other quite easily but its a chore getting all the nodes working together and making sure every node is using the right version of Cuda and Java and the JCuda packages. Python is a ton easier in that respect. Plus there is a lot of other little things that get brought to the table down the line that I want to look at such as machine learning, embedding graph databases in cassandra, etc. python should just make that a bunch easier. I am willing to take the performance hit for the interoperability.&lt;/p&gt;

&lt;h1 id=&quot;pycuda-notes&quot;&gt;Pycuda notes&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Everything you pass to your kernel has to be some sort of numpy construct. EVERYTHING. I spent about an hour wondering why things were not working because I was passing a standard python int.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;using arrays of structs is both easy and a total pain, I still do not understand the whole argument between SOA and AOS. pycuda makes it almost painfully hard and obtuse to use arrays of structs compared to just passing multiple arrays of standard types.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;pyspark-notes&quot;&gt;Pyspark notes&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You want to get the most out of your gpgpu kernels, so you want to dump as much on the gpu as possible in order to
maximisze the parallelism as you can. This means you somehow have to pass a chunk of a dataframe or rdd to the GPU at once. Thankfully if you can figure out how to get the right sized partition then this isn’t much of a problem. You can solve this by changing the executor memory, sort of, in the spark configs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;you can also manually break the partitions up. I didn’t see much benefit to this though as it didn’t really seem to do much for me,.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;you want to be really careful work multiple workers per node. gpus are resource starved and you can run out of memory if you arent careful&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I found foreachPartition() helpful here. it doesn’t return anything itself and you cannot write back to the rdd since its immutable but since those weren’t really problems for me… What was useful was writing directly inside that loop back to cassandra with batched writes. I wanted, at least at this stage to write back out to cassandra. It slows things down but also means I don’t ever have to compute certain things ever again.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;cassandra-notes&quot;&gt;Cassandra notes&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;there isn’t much to say here, you are going to grab things out of cassandra based on cassandra’s partitions as dataframes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;model-overview&quot;&gt;Model overview&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Pyspark-&amp;gt;Get partition from cassandra-&amp;gt;foreach partition:
**(launch kernel-&amp;gt;compute on partition-&amp;gt;writeback to cassandra)&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Random wierd Cassandra issue</title>
   <link href="http://www.wroth.com/posts/cassandra-silliness.html"/>
   <updated>2017-05-13T00:00:00+00:00</updated>
   <id>/posts/cassandra-silliness</id>
   <content type="html">&lt;h3 id=&quot;so-this-happened-today&quot;&gt;So this happened today&lt;/h3&gt;

&lt;p&gt;I have been working with Cassandra recently and I enjoy the idea of it. I think it has potential even if I do need to do a lot of tuning for our cluster. Right now it is set up to run on five nodes out of a dedicated raid array on each node we are using for testing such things. It has a lot of space and nobody else is using it so it should be really nice.&lt;/p&gt;

&lt;p&gt;Initially I set it up to use the normal private cat5 network just to run some tests to see if it would work, etc, could be interoperable with Apache Spark in our setup that sort of thing. Everything was, if a bit slower than expected. So I stopped it, moved everything to our infiniband network, and started everything back up and thats when I began to notice some really bizarre behavior. One node out of the five, at startup, could see all the other nodes but then would soon stop seeing one specific node. This happened consistently and nothing I could find seemed to address the issue. I checked and rechecked the setup and everything was fine. My feeling is that it was like this before which probably contributed to it being slow (it feels faster now that I have fixed it).&lt;/p&gt;

&lt;p&gt;I don’t know why yet, but the solution was really REALLY strange. All the nodes had system times that were relatively close to each other with the exception of the one that was randomly being reported as unreachable which was about a half hour behind the others. The wierd thing is that only one node reported it as unreachable. The fix was just to set the slow node’s system time ahead to more closely match the other nodes. Since then the problem has not resurfaced. Very VERY strange, and it wasted most of my morning.&lt;/p&gt;

&lt;p&gt;(Yes I know they should be running ntp, its on the to-do list. I don’t know why they aren’t already running it. The entire cluster is due for a massive system overhaul where we wipe all the nodes and do a full system reinstall so I will address it then.)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to read research papers</title>
   <link href="http://www.wroth.com/posts/how-to-read-papers.html"/>
   <updated>2017-04-30T05:25:22+00:00</updated>
   <id>/posts/how-to-read-papers</id>
   <content type="html">&lt;h2 id=&quot;how-to-read-papers&quot;&gt;How to read papers&lt;/h2&gt;

&lt;p&gt;This is not something I wrote, but is something a good friend of mine linked on social media (he also did not write it, but stumbled across it recently).
It is probably one of the most useful skills a researcher can develop. I have, over time, 
managed to arrive at a very similar place as the original author whos paper you can find here:
&lt;a href=&quot;http://blizzard.cs.uwaterloo.ca/keshav/home/Papers/data/07/paper-reading.pdf&quot;&gt;Link to original Paper by S. Keshev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The paper is well laid out, easy to follow and makes a rediculous amount of sense. It is also short and to the point. Follow the steps, there are like… three? Don’t skip any. Repeatition… repetition… repetition… eventually it will just be habit.&lt;/p&gt;

&lt;p&gt;I am planning on revising my own technique a bit after reading this as there is always room for improvement.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>redirect and capture stdout</title>
   <link href="http://www.wroth.com/posts/redirect-stdout.html"/>
   <updated>2017-04-23T01:28:54+00:00</updated>
   <id>/posts/redirect-stdout</id>
   <content type="html">&lt;h2 id=&quot;nothing-really-new-to-see-here&quot;&gt;Nothing really new to see here&lt;/h2&gt;

&lt;p&gt;You can find versions of this all over the internet, I am just tired of not saving my own hacks and fixes in easy to find ways. This basically redirects stdout to something else, saves it, then puts stdout back. allowing me to capture output and fix something I shouldn’t have had to fix because the sample code for the class (not the Professor’s fault) is completely undocumented and wierd. It basically let me drop prefixes on a toy java database because the way you pulled tables created copies instead of clones.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;        ByteArrayOutputStream bstream = new ByteArrayOutputStream();
        PrintStream pstream = new PrintStream(bstream);
        PrintStream stock = System.out;
        System.setOut(pstream);
        dbengine.displaySchema();
        System.out.flush();
        System.setOut(stock);
        String HACK = &quot;&quot;;
        try {
            HACK = new String(bstream.toByteArray(), &quot;UTF-8&quot;);
        } catch (UnsupportedEncodingException e) {
            System.out.println(e);
        }
        // System.out.println(HACK);
        ArrayList&amp;lt;String&amp;gt; prefix = new ArrayList&amp;lt;String&amp;gt;();
        String[] tmp = HACK.split(&quot;\\n&quot;);
        for(String t : tmp) {
            if(t.contains(&quot;(&quot;)) 
                prefix.add(t.split(&quot;\\(&quot;)[0]);
        }
        for(String p : prefix) {
            Relation r = dbengine.getRelation(p);
            r.prefixColumnNames(p);
        }
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>So, maybe this will work this this attempt</title>
   <link href="http://www.wroth.com/posts/and-so-it-begins.html"/>
   <updated>2017-04-22T00:05:22+00:00</updated>
   <id>/posts/and-so-it-begins</id>
   <content type="html">&lt;h2 id=&quot;so-i-have-this-theory-that-if-i-actually-make-an-effort-to-do-this-i-will-actually-make-a-sizeable-dent-in-it-and-accomplish-something-interesting-instead-of-talking-about-it-all-the-time&quot;&gt;So I have this theory that if I actually make an effort to do this I will actually make a sizeable dent in it and accomplish something interesting instead of talking about it all the time.&lt;/h2&gt;

&lt;p&gt;I don’t know if it will work this time. I have tried before. But I think it may work this time since I am using githubs unlimited priviate .edu repos for all my research. I want to opensource a lot of that and in the process of writing it up and publishing it. We also have a group lab site that I/we are supposed to be maintaining that keeps getting pushed to the bottom of the to-do list. Maybe this will help with that too. It’s using a full CMS that is just overkill for what we use it for anyway.&lt;/p&gt;

&lt;h3 id=&quot;some-code-examples-i-am-lazy-and-may-need-a-quick-refernece-later&quot;&gt;some code examples. I am lazy and may need a quick refernece later.&lt;/h3&gt;

&lt;p&gt;Maybe its lazy, but I am not at all familiar with markdown. I am just going to leave them there for now. it may annoy other people but this is mostly for me.&lt;/p&gt;

&lt;h4 id=&quot;random-syntax-highlighting-test&quot;&gt;random syntax highlighting test&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function test() {
  console.log(&quot;notice the blank line before this function?&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def main():
	print(blah)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;int main(int arc, char**argv) {
	prinf(&quot;blah\n&quot;);
	exit(0);
	}
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 
</feed>